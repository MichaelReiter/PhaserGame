// Generated by CoffeeScript 1.10.0
var Enemy,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Enemy = (function(superClass) {
  extend(Enemy, superClass);

  Enemy.prototype.difficultyScale = 0.75;

  Enemy.prototype.approachDeltaX = 200;

  Enemy.prototype.shootDeltaY = 50;

  function Enemy() {
    this.scaleDifficulty();
    Enemy.__super__.constructor.apply(this, arguments);
  }

  Enemy.prototype.scaleDifficulty = function() {
    this.movementSpeed = player.movementSpeed * this.difficultyScale;
    this.fireRate = player.fireRate * this.difficultyScale / 4;
    this.bulletSpeed = player.bulletSpeed * this.difficultyScale;
  };

  Enemy.prototype.AI = function() {
    this.followPlayer();
    this.shootPlayer();
  };

  Enemy.prototype.followPlayer = function() {
    if (Math.abs(player.ref.x - this.ref.x) < 3) {
      this.facing = player.facing;
      this.setFacingDirection();
    }
    if (player.ref.x - this.ref.x > this.approachDeltaX) {
      this.moveRight();
    } else if (player.ref.x - this.ref.x < -this.approachDeltaX) {
      this.moveLeft();
    } else {
      this.idle();
    }
  };

  Enemy.prototype.shootPlayer = function() {
    if (Math.abs(player.ref.y - this.ref.y) < this.shootDeltaY && this.canShoot()) {
      this.shoot();
    }
  };

  return Enemy;

})(Entity);
